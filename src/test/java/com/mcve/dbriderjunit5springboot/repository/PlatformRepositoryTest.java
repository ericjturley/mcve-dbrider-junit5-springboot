package com.mcve.dbriderjunit5springboot.repository;

import com.github.database.rider.core.api.connection.ConnectionHolder;
import com.github.database.rider.core.api.dataset.DataSet;
import com.github.database.rider.core.api.dataset.ExpectedDataSet;
// ================================================================//
// Toggle between these two annotations                            //
//import com.github.database.rider.spring.api.DBRider;               //
import com.github.database.rider.junit5.api.DBRider;             //
// ================================================================//
import com.mcve.dbriderjunit5springboot.BpnsEntityConfiguration;
import com.mcve.dbriderjunit5springboot.PlatformName;
import com.mcve.dbriderjunit5springboot.ProviderName;
import com.mcve.dbriderjunit5springboot.entity.Platform;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import javax.sql.DataSource;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;


@SuppressWarnings("OptionalGetWithoutIsPresent")
@DBRider // <--- change the import to toggle which annotation this is (spring or junit5)
@DataJpaTest
@SpringJUnitConfig(BpnsEntityConfiguration.class)
@DataSet("platform/platforms.yml")
class PlatformRepositoryTest {

	@Autowired
	private PlatformRepository platformRepository;

	/*

	Toggle these on for one of the tests in the Readme. (See the Readme)


	@Autowired
	DataSource dataSource;

	private ConnectionHolder connectionHolder = () -> dataSource.getConnection();
	*/

	@Test
	void injectedComponentsArePresent() {
		assertThat(platformRepository).isNotNull();
	}

	@Test
	void findById() {
		Optional<Platform> repoFound = platformRepository.findById((short) 10);
		assertThat(repoFound).isPresent();
		assertThat(repoFound.get()).extracting("name")
		                           .contains(PlatformName.FCM);
		assertThat(platformRepository.findById((short) 99999)).isNotPresent();
	}

	@Test
	@ExpectedDataSet(value = "platform/platforms-expected.yml",
	                 ignoreCols = "id",
	                 orderBy = "name")
	void save() {
		long rows = countApplicationRows();

		Platform platform = new Platform(PlatformName.LOOPBACK, ProviderName.LOOPBACK);
		Platform saved = platformRepository.saveAndFlush(platform);

		assertThat(saved.getId()).isNotNull();
		assertEquals(rows + 1, countApplicationRows());
	}

	private long countApplicationRows() {
		return platformRepository.count();
	}
}